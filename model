View(df_final)

# Load libraries
library(randomForest)
library(ranger)

# Convert 'city_state' and 'Company' to factors
df_final$city_state <- as.factor(df_final$city_state)
df_final$Company <- as.factor(df_final$Company)

formula <- Avg_Sales_Per_Unit_Thousands ~ . - Company - city_state

# Train the random forest model
model <- ranger(
  formula = formula,             # target and predictors
  data = df_final,               # DataFrame 
  mtry = 3,                      # Number of variables tried at each split
  importance = 'impurity'        # determine key predictors
)

# Print model summary
print(model)

# Predict on new data
predictions <- predict(model, df_final)

#create column of predictions
df_final$predicted_sales <- predictions$predictions

# Filter cities with positive population growth
growing_cities <- df_final[df_final$popChange_2020_to_2023 > 0, ]

# Sort by highest predicted sales per unit
growing_cities_sorted <- growing_cities[order(-growing_cities$predicted_sales), ]

# Print the top city/state with highest sales prediction and positive population growth
print(growing_cities_sorted[1, c("city_state", "predicted_sales", "popChange_2020_to_2023")])

# Filter for cities with positive population growth
growing_cities <- df_final[df_final$popChange_2020_to_2023 > 0, ]

# Sort by highest predicted sales
growing_cities_sorted <- growing_cities[order(-growing_cities$predicted_sales), ]

# Select the top 30 cities
top_50_cities <- head(growing_cities_sorted, 30)

library(ggplot2)
# bar chart for the top 50 cities
ggplot(top_50_cities, aes(x = reorder(city_state, -predicted_sales), 
  fill = Company)) +
  geom_bar(stat = "count") +
  coord_flip() +  
  labs(
    title = "Top 50 Cities by Company",
    x = "City/State",
    y = "Number of Units"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_brewer(palette = "Set3") 
